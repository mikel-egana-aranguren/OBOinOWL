/**
 * 
 * Copyright © Mikel Egana Aranguren 
 * The OBOParser.java software is free software and is licensed under the terms of the 
 * GNU General Public License (GPL) as published by the Free Software Foundation; 
 * either version 2 of the License, or (at your option) any later version. The OBOParser.java 
 * software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GPL for more details; a copy of the GPL is included with this product. 
 * 
 * For more info:
 * mikel.eganaaranguren@cs.manchester.ac.uk
 * http://www.gong.manchester.ac.uk
 * 
 */

package uk.ac.manchester.bong.obo2owl;

import java.io.IOException;
import java.lang.reflect.Array;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Date;

import org.geneontology.oboedit.dataadapter.GOBOParseEngine;
import org.geneontology.oboedit.dataadapter.GOBOParseException;
import org.geneontology.oboedit.dataadapter.GOBOParser;
import org.geneontology.oboedit.datamodel.NestedValue;

import org.semanticweb.owl.model.OWLAnnotationProperty;
import org.semanticweb.owl.model.OWLClass;
import org.semanticweb.owl.model.OWLDataFactory;
import org.semanticweb.owl.model.OWLException;
import org.semanticweb.owl.model.OWLObjectProperty;
import org.semanticweb.owl.model.OWLObjectSomeRestriction;
import org.semanticweb.owl.model.OWLOntology;
import org.semanticweb.owl.model.change.AddDomain;
import org.semanticweb.owl.model.change.AddEntity;
import org.semanticweb.owl.model.change.AddObjectPropertyRange;
import org.semanticweb.owl.model.change.AddSuperClass;
import org.semanticweb.owl.model.change.AddSuperProperty;
import org.semanticweb.owl.model.change.ChangeVisitor;
import org.semanticweb.owl.model.change.OntologyChange;
import org.semanticweb.owl.model.change.SetSymmetric;
import org.semanticweb.owl.model.change.SetTransitive;


public class OBOParser implements GOBOParser {
	
	private OWLCapsule owlcapsule;
	private Boolean StanzaTerm=true; // True for term, false for typedef
	private String lastID=""; // Term or typedef
	private boolean firstround; // True for first, false for second
	
	public OBOParser (OWLCapsule owlcapsule,boolean firstround){
		this.owlcapsule = owlcapsule;
		this.firstround = firstround;
	}

	public void readAltID(String arg0, NestedValue arg1) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("alt_id");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0);
		}
	}

	public void readAutogeneratedBy(String arg0) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("auto-generated-by");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0);
		}
	}

	public void readComment(String arg0, NestedValue arg1) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLRDFSAnnotatioProperty ("comment");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0);
		}
	}
	public void readConsider(String arg0, NestedValue arg1) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("consider");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0);
		}
	}

	public void readDate(Date arg0) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("date");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0.toString());
		}
	}

	public void readDef(String arg0, XrefPair[] arg1, NestedValue arg2) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("def");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0);
		}
	}

	public void readDefaultNamespace(String arg0) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("default_namespace");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0);	
		}
	}

	public void readDisjoint(String arg0, String arg1, boolean arg2, NestedValue arg3) throws GOBOParseException {
		// TODO: not implemented yet, haven't found and OBO ontology with disjoints to test
		// TODO: intersection_of not read by the parser
		
//		OWLDataFactory factory = owlcapsule.getFactory();
//		HashSet classesToDisjoint= new HashSet();
//		classesToDisjoint.add();
//		OWLDisjointClassesAxiom disjointsAxiom=factory.getOWLDisjointClassesAxiom(classesToDisjoint); 
//		ChangeVisitor visitor = connection.getChangeVisitor(ontology);
//		// here it fails somehow ...
//		System.out.println(classesToDisjoint);
//		OntologyChange oc = new AddClassAxiom(ontology, disjointsAxiom, null); 
//		oc.accept(visitor);
	}

	public void readDomain(String arg0, NestedValue arg1) throws GOBOParseException {
		if(firstround == true){
			try {
				OWLOntology ontology = owlcapsule.getOntology();
				OWLClass domainClass = ontology.getClass(new URI(ontology.getLogicalURI() + "#" + arg0.replace(":", "_")));
				OWLObjectProperty prop= ontology.getObjectProperty(new URI(ontology.getLogicalURI() + "#" + lastID));
				OntologyChange domainOC =new AddDomain(ontology, prop, domainClass, null); 
				ChangeVisitor visitor = owlcapsule.getConnection().getChangeVisitor(ontology);
				domainOC.accept(visitor);
			} catch (OWLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public void readFileVersion(String arg0) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("file_version");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0);
		}
	}

	public void readFormatVersion(String arg0) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("format_version");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0);
		}
	}

	public void readID(String arg0, NestedValue arg1) throws GOBOParseException {
		if(firstround == true){
			try {
				if(StanzaTerm == true){
					OWLOntology ontology = owlcapsule.getOntology();
					OWLClass theclass = owlcapsule.getFactory().getOWLClass(new URI(ontology.getLogicalURI() + "#" + arg0.replace(":", "_")));
					ChangeVisitor visitor = owlcapsule.getConnection().getChangeVisitor(ontology);
					OntologyChange oc = new AddEntity(ontology, theclass, null); 
					oc.accept(visitor);
				}
				else{
					OWLOntology ontology = owlcapsule.getOntology();
					OWLObjectProperty prop = owlcapsule.getFactory().getOWLObjectProperty(new URI(ontology.getLogicalURI() + "#" + arg0)); 
					ChangeVisitor visitor = owlcapsule.getConnection().getChangeVisitor(ontology);
					OntologyChange oc = new AddEntity(ontology, prop, null); 
					oc.accept(visitor);
				}
			} catch (OWLException e) {
				e.printStackTrace();
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}
		lastID= arg0;
	}
	public void readIDMapping(String arg0, String arg1) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("id_mapping");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0 + " " + arg1 );
		}
	}

	public void readIDPrefix(String arg0) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("id_prefix");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0);
		}
	}

	public void readImport(String arg0) throws IOException, GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("import");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0);	
		}
	}

	public void readInstanceOf(String arg0, NestedValue arg1) throws GOBOParseException {
		// TODO Not implemented yet, haven't found an OBO ontology with instances
	}

	public void readInverseOf(String arg0, String arg1, boolean arg2, NestedValue arg3) throws GOBOParseException {
		// TODO Not implemented yet, no OBO ontology example found
//		try {
//			OWLOntology ontology = owlcapsule.getOntology();
//			OWLObjectProperty prop=ontology.getObjectProperty(new URI(ontology.getLogicalURI() + "#" + arg0));
//			OWLObjectProperty prop_inv=ontology.getObjectProperty(new URI(ontology.getLogicalURI() + "#" + lastID));
//			ChangeVisitor visitor = (owlcapsule.getConnection()).getChangeVisitor(ontology);
//			OntologyChange domainOC =new AddInverse(ontology, prop, prop_inv, null); 
//			domainOC.accept(visitor);
//		} catch (OWLException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (URISyntaxException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
	}
	public void readIsAnonymous(NestedValue arg0) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("is_anonymous");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, "true");
		}
	}

	public void readIsCyclic(boolean arg0, NestedValue arg1) throws GOBOParseException {
		// TODO Not in OWL-DL
	}
	public void readIsObsolete(NestedValue arg0) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("is_obsolete");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, "true");
		}
	}
	public void readIsSymmetric(boolean arg0, NestedValue arg1) throws GOBOParseException {
		if(firstround == true){
			try {
				OWLOntology ontology = owlcapsule.getOntology();
				OWLObjectProperty prop = ontology.getObjectProperty(new URI(ontology.getLogicalURI() + "#" + lastID));
				ChangeVisitor visitor = (owlcapsule.getConnection()).getChangeVisitor(ontology);
				SetSymmetric symmetricOC= new SetSymmetric(ontology, prop, arg0, null);
				symmetricOC.accept(visitor); 
			} catch (OWLException e) {
				e.printStackTrace();
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}
	}
	public void readIsTransitive(boolean arg0, NestedValue arg1) throws GOBOParseException {
		if(firstround == true){
			try {
				OWLOntology ontology = owlcapsule.getOntology(); 
				OWLObjectProperty prop= ontology.getObjectProperty(new URI(ontology.getLogicalURI() + "#" + lastID));
				SetTransitive transitiveOC=new SetTransitive(ontology, prop, true, null); 
				ChangeVisitor visitor = owlcapsule.getConnection().getChangeVisitor(ontology);
				transitiveOC.accept(visitor);
			} catch (OWLException e) {
				e.printStackTrace();
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}
	}
	public void readIsa(String arg0, String arg1, boolean arg2, boolean arg3, NestedValue arg4) throws GOBOParseException {
		if(firstround == false){
			try {		
				if(StanzaTerm == true){
					OWLOntology ontology = owlcapsule.getOntology();
					OWLClass child=ontology.getClass(new URI(ontology.getLogicalURI() + "#" + lastID.replace(":", "_")));
					OWLClass parent=ontology.getClass(new URI(ontology.getLogicalURI() + "#" + arg0.replace(":", "_")));
					ChangeVisitor visitor = owlcapsule.getConnection().getChangeVisitor(ontology);
					OntologyChange oc = new AddSuperClass(ontology, child, parent,null);
					oc.accept(visitor);
				}
				else{
					OWLOntology ontology = owlcapsule.getOntology();
					OWLDataFactory factory = owlcapsule.getFactory();
					OWLObjectProperty property = factory.getOWLObjectProperty(new URI(ontology.getLogicalURI() + "#" + lastID));
					OWLObjectProperty superProperty = factory.getOWLObjectProperty(new URI(ontology.getLogicalURI() + "#" + arg0)); 
					ChangeVisitor visitor = owlcapsule.getConnection().getChangeVisitor(ontology);
					OntologyChange oc = new	AddSuperProperty(ontology, property, superProperty, null); 
					oc.accept(visitor);	
				}
			} catch (OWLException e) {
				e.printStackTrace();
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}
	}
	public void readName(String arg0, NestedValue arg1) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLRDFSAnnotatioProperty ("label");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0);
		}
	}
	public void readNamespace(String arg0, NestedValue arg1) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("namespace");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0);
		}
	}
	public void readNamespaceIDRule(String arg0, String arg1) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("namespace_id_rule");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0 + " " + arg1);	
		}
	}
	public void readPropertyValue(String arg0, String arg1, String arg2, boolean arg3, NestedValue arg4) throws GOBOParseException {}
	public void readRange(String arg0, NestedValue arg1) throws GOBOParseException {
		if(firstround == true){
			try {
				OWLOntology ontology = owlcapsule.getOntology();
				OWLClass rangeClass=ontology.getClass(new URI(ontology.getLogicalURI() + "#" + arg0.replace(":", "_"))); 
				OWLObjectProperty prop=ontology.getObjectProperty(new URI(ontology.getLogicalURI() + "#" + lastID));
				ChangeVisitor visitor = (owlcapsule.getConnection()).getChangeVisitor(ontology);
				OntologyChange rangeOC =new AddObjectPropertyRange(ontology, prop, rangeClass, null); 
				rangeOC.accept(visitor);
			} catch (OWLException e) {
				e.printStackTrace();
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}
	}
	public void readRelationship(String arg0, String arg1, boolean arg2, boolean arg3, boolean arg4, boolean arg5, Integer arg6, Integer arg7, Integer arg8, String arg9, NestedValue arg10) throws GOBOParseException {
		if (firstround == false){
			try {
				OWLOntology ontology = owlcapsule.getOntology();
				OWLDataFactory factory = owlcapsule.getFactory();
				OWLObjectProperty prop = factory.getOWLObjectProperty(new URI(ontology.getLogicalURI() + "#" + arg0));
				OWLClass filler = factory.getOWLClass(new URI(ontology.getLogicalURI() + "#" + arg1.replace(":", "_")));
				OWLClass theclass = factory.getOWLClass(new URI(ontology.getLogicalURI() + "#" + lastID.replace(":", "_")));
				OWLObjectSomeRestriction restr=factory.getOWLObjectSomeRestriction(prop, filler);
				ChangeVisitor visitor = owlcapsule.getConnection().getChangeVisitor(ontology);
				OntologyChange oc = new AddSuperClass(ontology, theclass , restr ,null);
				oc.accept(visitor);
			} catch (OWLException e) {
				e.printStackTrace();
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}
	}
	public void readRemark(String arg0) throws GOBOParseException {
		if (firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("remark");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0);	
		}
	}
	public void readReplacedBy(String arg0, NestedValue arg1) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("is_anonymous");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0);
		}
	}
	public void readSavedBy(String arg0) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("saved_by");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0);	
		}
	}
	public void readSubset(String arg0, NestedValue arg1) throws GOBOParseException {
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("subset");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0);
		}
	}
	public void readSubsetDef(String arg0, String arg1) throws GOBOParseException {
		if(firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("subset_def");
			owlcapsule.addOntologyAnnotationValue(annotprop, arg0);
		}
	}
	public void readSynonym(String arg0, XrefPair[] arg1, int arg2, String arg3, NestedValue arg4) throws GOBOParseException {
		// TODO syn categories are not provided, XrefPair is always empty
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("synonym");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0);
		}
		
	}
	public void readSynonymCategory(String arg0, String arg1, int arg2) throws GOBOParseException {
		// TODO Parser does not call this method
	}
	public void readXrefAnalog(XrefPair arg0) throws GOBOParseException {
		// TODO not very well implemented
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("xref");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0.xref);
		}
	}
	public void readXrefUnk(XrefPair arg0) throws GOBOParseException {
//		 TODO not very well implemented
		if (StanzaTerm == true && firstround == true){
			OWLAnnotationProperty annotprop = owlcapsule.createOWLAnnotatioProperty("xref");
			owlcapsule.addAnnotationValue(lastID.replace(":", "_"), annotprop, arg0.xref);
		}
	}
	public void cancel() {}
	public void endFileParse(String arg0) throws GOBOParseException {}
	public void endParse() throws GOBOParseException {}
	public void readBangComment(String arg0) throws GOBOParseException {}
	public void readTagValue(String arg0, String arg1) throws GOBOParseException {}
	public void setParseEngine(GOBOParseEngine arg0) {}
	public void startFileParse(String arg0) throws GOBOParseException {}
	public void startParse() throws GOBOParseException {}
	public void startStanza(String arg0) throws GOBOParseException {
		if(arg0.equals("Typedef")){
			StanzaTerm=false;
		}	
	}
}
